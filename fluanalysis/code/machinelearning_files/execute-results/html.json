{
  "hash": "7f5e75dc7ccac176de8323acff364d42",
  "result": {
    "markdown": "---\ntitle: \"Flu Anlaysis - Machine Learning\"\noutput:\n  html_document:\n    toc: FALSE\neditor: \n  markdown: \n    wrap: 72\n---\n\n\nFocused on single outcome, the continuous, numerical value of Body\nTemperature.\n\n## Load Libraries\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.2.1     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 0.5.2\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nhere() starts at /Users/deannalanier/Desktop/All_Classes_UGA/2023Spr_Classes/MADA/deannalanier-MADA-portfolio\n\n\nAttaching package: 'vip'\n\n\nThe following object is masked from 'package:utils':\n\n    vi\n\n\nLoading required package: rpart\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n\n✔ broom        1.0.2     ✔ rsample      1.1.1\n✔ dials        1.1.0     ✔ tune         1.0.1\n✔ infer        1.0.4     ✔ workflows    1.1.3\n✔ modeldata    1.1.0     ✔ workflowsets 1.0.0\n✔ parsnip      1.0.4     ✔ yardstick    1.1.0\n✔ recipes      1.0.5     \n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ dials::prune()    masks rpart::prune()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Search for functions across packages at https://www.tidymodels.org/find/\n\nLoading required package: Matrix\n\n\nAttaching package: 'Matrix'\n\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\n\nLoaded glmnet 4.1-7\n```\n:::\n:::\n\n\n## Load the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#path to clean data\ndata = readRDS(here(\"fluanalysis\", \"data\", \"cleandata2.rds\")) #load RDS file\n```\n:::\n\n\n## Check the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#check the data to make sure it has loaded properly\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  SwollenLymphNodes ChestCongestion ChillsSweats NasalCongestion Sneeze Fatigue\n1               Yes              No           No              No     No     Yes\n2               Yes             Yes           No             Yes     No     Yes\n3               Yes             Yes          Yes             Yes    Yes     Yes\n4               Yes             Yes          Yes             Yes    Yes     Yes\n5               Yes              No          Yes              No     No     Yes\n6                No              No          Yes              No    Yes     Yes\n  SubjectiveFever Headache Weakness CoughIntensity  Myalgia RunnyNose AbPain\n1             Yes      Yes     Mild         Severe     Mild        No     No\n2             Yes      Yes   Severe         Severe   Severe        No     No\n3             Yes      Yes   Severe           Mild   Severe       Yes    Yes\n4             Yes      Yes   Severe       Moderate   Severe       Yes     No\n5             Yes      Yes Moderate           None     Mild        No     No\n6             Yes      Yes Moderate       Moderate Moderate        No     No\n  ChestPain Diarrhea EyePn Insomnia ItchyEye Nausea EarPn Pharyngitis\n1        No       No    No       No       No     No    No         Yes\n2        No       No    No       No       No     No   Yes         Yes\n3       Yes       No    No      Yes       No    Yes    No         Yes\n4        No       No    No      Yes       No    Yes   Yes         Yes\n5        No       No   Yes      Yes       No    Yes    No         Yes\n6       Yes      Yes    No       No       No    Yes    No         Yes\n  Breathless ToothPn Vomit Wheeze BodyTemp\n1         No      No    No     No     98.3\n2         No      No    No     No    100.4\n3        Yes     Yes    No     No    100.8\n4         No      No    No    Yes     98.8\n5         No      No    No     No    100.5\n6        Yes      No    No    Yes     98.4\n```\n:::\n:::\n\n\n#Setup\n\n1.  Set random seed to 123\n2.  Split the dataset into 70% training 30% testing. Use BodyTemp as\n    stratification\n3.  Do 5-fold cross-validation, 5 times repeated.\n4.  Create a recipe for the data and fitting\n\n## 1. Set random seed to 123\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set seed \nset.seed(123)\n```\n:::\n\n\n## 2. Split the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Split the data into test and training\ndata_split = initial_split(data,strata = BodyTemp, prop = 7/10)\n\n#create training and test\ndata_train=training(data_split)\ndata_test=testing(data_split)\n```\n:::\n\n\n## 3. Cross validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 5 fold cross-validation 5 times repeated 5x5\n# stratify on Body Temp\n# use vfold_cv to create a resample object for the training data \n\n#CV on training data\nfold_train = vfold_cv(data_train, v = 5, repeats = 5, strata = BodyTemp)\nfold_train\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#  5-fold cross-validation repeated 5 times using stratification \n# A tibble: 25 × 3\n   splits            id      id2  \n   <list>            <chr>   <chr>\n 1 <split [405/103]> Repeat1 Fold1\n 2 <split [405/103]> Repeat1 Fold2\n 3 <split [406/102]> Repeat1 Fold3\n 4 <split [408/100]> Repeat1 Fold4\n 5 <split [408/100]> Repeat1 Fold5\n 6 <split [405/103]> Repeat2 Fold1\n 7 <split [405/103]> Repeat2 Fold2\n 8 <split [406/102]> Repeat2 Fold3\n 9 <split [408/100]> Repeat2 Fold4\n10 <split [408/100]> Repeat2 Fold5\n# … with 15 more rows\n```\n:::\n\n```{.r .cell-code}\n#CV on test data\nfold_test = vfold_cv(data_test, v = 5, repeats = 5, strata = BodyTemp)\nfold_test\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#  5-fold cross-validation repeated 5 times using stratification \n# A tibble: 25 × 3\n   splits           id      id2  \n   <list>           <chr>   <chr>\n 1 <split [175/47]> Repeat1 Fold1\n 2 <split [176/46]> Repeat1 Fold2\n 3 <split [179/43]> Repeat1 Fold3\n 4 <split [179/43]> Repeat1 Fold4\n 5 <split [179/43]> Repeat1 Fold5\n 6 <split [175/47]> Repeat2 Fold1\n 7 <split [176/46]> Repeat2 Fold2\n 8 <split [179/43]> Repeat2 Fold3\n 9 <split [179/43]> Repeat2 Fold4\n10 <split [179/43]> Repeat2 Fold5\n# … with 15 more rows\n```\n:::\n:::\n\n\n## 4. Create a recipe for the data and fitting\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# categorical variables as dummy variables \n#pick all nominal predictor variables \n\ndata_recipe = recipe(BodyTemp ~ ., data = data_train) %>%\n  step_dummy(all_nominal(), -all_outcomes()) \n```\n:::\n\n\n# Null Model Performance\n\n### compute the performance of a null model\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute the performance of a null model\nnullmodel = null_model() %>% \n  set_engine(\"parsnip\") %>%\n  set_mode(\"regression\")\n```\n:::\n\n\n### Compute the RSME for training and test data for the model\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## training data\n\n#recipe\nnullr_train = recipe(BodyTemp ~ 1, data = data_train)\n\n#workflow\nnullw_train = workflow() %>%\n  add_model(nullmodel) %>% \n  add_recipe(nullr_train)\n\n#fit\nnullf_train = fit_resamples(nullw_train, resamples = fold_train)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold1, Repeat1: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold2, Repeat1: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold3, Repeat1: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold4, Repeat1: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5, Repeat1: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold1, Repeat2: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold2, Repeat2: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold3, Repeat2: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold4, Repeat2: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5, Repeat2: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold1, Repeat3: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold2, Repeat3: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold3, Repeat3: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold4, Repeat3: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5, Repeat3: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold1, Repeat4: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold2, Repeat4: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold3, Repeat4: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold4, Repeat4: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5, Repeat4: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold1, Repeat5: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold2, Repeat5: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold3, Repeat5: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold4, Repeat5: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5, Repeat5: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n```{.r .cell-code}\n#null model recipe with testing data\n\n#recipe\nnullr_test = recipe(BodyTemp ~ 1, data = data_test)\n\n#workflow\nnullw_test = workflow() %>% \n  add_model(nullmodel) %>% \n  add_recipe(nullr_test)\n\n#fit\nnullf_test = fit_resamples(nullw_test, resamples = fold_test)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold1, Repeat1: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold2, Repeat1: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold3, Repeat1: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold4, Repeat1: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5, Repeat1: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold1, Repeat2: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold2, Repeat2: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold3, Repeat2: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold4, Repeat2: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5, Repeat2: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold1, Repeat3: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold2, Repeat3: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold3, Repeat3: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold4, Repeat3: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5, Repeat3: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold1, Repeat4: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold2, Repeat4: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold3, Repeat4: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold4, Repeat4: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5, Repeat4: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold1, Repeat5: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold2, Repeat5: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold3, Repeat5: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold4, Repeat5: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5, Repeat5: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n:::\n\n\n### Null Model Metrics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#RMSE and RSQ for training set\nnullf_train %>% collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  .metric .estimator   mean     n std_err .config             \n  <chr>   <chr>       <dbl> <int>   <dbl> <chr>               \n1 rmse    standard     1.21    25  0.0177 Preprocessor1_Model1\n2 rsq     standard   NaN        0 NA      Preprocessor1_Model1\n```\n:::\n\n```{.r .cell-code}\n#RMSE and RSQ for test set\nnullf_test %>% collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  .metric .estimator   mean     n std_err .config             \n  <chr>   <chr>       <dbl> <int>   <dbl> <chr>               \n1 rmse    standard     1.16    25  0.0285 Preprocessor1_Model1\n2 rsq     standard   NaN        0 NA      Preprocessor1_Model1\n```\n:::\n:::\n\n\n# Model Tuning and Fitting\n\n1.  Tree\n2.  LASSO\n3.  random forest\n\nThe steps (blocks of code) included are 1) model specification, 2)\nworkflow definition, 3) tuning grip specification and 4) tuning using\ncross-validation and the tune_grip function\n\n## Tree\n\n### Model specification\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_spec = decision_tree(cost_complexity = tune(),tree_depth = tune())%>%\n  set_engine(\"rpart\")%>%\n  set_mode(\"regression\")\n\ntree_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDecision Tree Model Specification (regression)\n\nMain Arguments:\n  cost_complexity = tune()\n  tree_depth = tune()\n\nComputational engine: rpart \n```\n:::\n:::\n\n\n### Workflow definition\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#create workflow\ntree_workflow = workflow()%>%\n  add_model(tree_spec)%>%\n  add_recipe(data_recipe) #recipe created in step 4 of the setup\n```\n:::\n\n\n### tuning grid specification\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_grid = grid_regular(cost_complexity(),\n                         tree_depth(),\n                         levels = 5)\ntree_grid\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 25 × 2\n   cost_complexity tree_depth\n             <dbl>      <int>\n 1    0.0000000001          1\n 2    0.0000000178          1\n 3    0.00000316            1\n 4    0.000562              1\n 5    0.1                   1\n 6    0.0000000001          4\n 7    0.0000000178          4\n 8    0.00000316            4\n 9    0.000562              4\n10    0.1                   4\n# … with 15 more rows\n```\n:::\n\n```{.r .cell-code}\n#depth\ntree_grid %>%\n  count(tree_depth)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  tree_depth     n\n       <int> <int>\n1          1     5\n2          4     5\n3          8     5\n4         11     5\n5         15     5\n```\n:::\n:::\n\n\n### tuning using cross validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_cv = tree_workflow %>%\n  tune_grid(\n    resamples = fold_train,\n    grid = tree_grid\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold1, Repeat1: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold2, Repeat1: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold3, Repeat1: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold4, Repeat1: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5, Repeat1: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold1, Repeat2: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold2, Repeat2: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold3, Repeat2: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold4, Repeat2: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5, Repeat2: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold1, Repeat3: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold2, Repeat3: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold3, Repeat3: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold4, Repeat3: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5, Repeat3: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold1, Repeat4: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold2, Repeat4: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold3, Repeat4: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold4, Repeat4: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5, Repeat4: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold1, Repeat5: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold2, Repeat5: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold3, Repeat5: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold4, Repeat5: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5, Repeat5: internal:\n  There was 1 warning in `dplyr::summarise()`.\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 1`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 4`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 8`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 11`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n  ℹ In argument: `.estimate = metric_fn(truth = BodyTemp, estimate = .pr...\n    = na_rm)`.\n  ℹ In group 1: `cost_complexity = 0.1`, `tree_depth = 15`.\n  Caused by warning:\n  ! A correlation computation is required, but `estimate` is constant an...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_cv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Tuning results\n# 5-fold cross-validation repeated 5 times using stratification \n# A tibble: 25 × 5\n   splits            id      id2   .metrics          .notes          \n   <list>            <chr>   <chr> <list>            <list>          \n 1 <split [405/103]> Repeat1 Fold1 <tibble [50 × 6]> <tibble [1 × 3]>\n 2 <split [405/103]> Repeat1 Fold2 <tibble [50 × 6]> <tibble [1 × 3]>\n 3 <split [406/102]> Repeat1 Fold3 <tibble [50 × 6]> <tibble [1 × 3]>\n 4 <split [408/100]> Repeat1 Fold4 <tibble [50 × 6]> <tibble [1 × 3]>\n 5 <split [408/100]> Repeat1 Fold5 <tibble [50 × 6]> <tibble [1 × 3]>\n 6 <split [405/103]> Repeat2 Fold1 <tibble [50 × 6]> <tibble [1 × 3]>\n 7 <split [405/103]> Repeat2 Fold2 <tibble [50 × 6]> <tibble [1 × 3]>\n 8 <split [406/102]> Repeat2 Fold3 <tibble [50 × 6]> <tibble [1 × 3]>\n 9 <split [408/100]> Repeat2 Fold4 <tibble [50 × 6]> <tibble [1 × 3]>\n10 <split [408/100]> Repeat2 Fold5 <tibble [50 × 6]> <tibble [1 × 3]>\n# … with 15 more rows\n\nThere were issues with some computations:\n\n  - Warning(s) x25: There was 1 warning in `dplyr::summarise()`. ℹ In argument: `.est...\n\nRun `show_notes(.Last.tune.result)` for more information.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#use collect metrics to give tibble with the results from the tuning\ntree_cv %>%\n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 × 8\n   cost_complexity tree_depth .metric .estimator     mean     n  std_err .config\n             <dbl>      <int> <chr>   <chr>         <dbl> <int>    <dbl> <chr>  \n 1    0.0000000001          1 rmse    standard     1.19      25  0.0181  Prepro…\n 2    0.0000000001          1 rsq     standard     0.0361    25  0.00422 Prepro…\n 3    0.0000000178          1 rmse    standard     1.19      25  0.0181  Prepro…\n 4    0.0000000178          1 rsq     standard     0.0361    25  0.00422 Prepro…\n 5    0.00000316            1 rmse    standard     1.19      25  0.0181  Prepro…\n 6    0.00000316            1 rsq     standard     0.0361    25  0.00422 Prepro…\n 7    0.000562              1 rmse    standard     1.19      25  0.0181  Prepro…\n 8    0.000562              1 rsq     standard     0.0361    25  0.00422 Prepro…\n 9    0.1                   1 rmse    standard     1.21      25  0.0177  Prepro…\n10    0.1                   1 rsq     standard   NaN          0 NA       Prepro…\n# … with 40 more rows\n```\n:::\n:::\n\n\n### Model Evaluation\n\nLook at diagnostics using autoplot().\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_cv %>% autoplot()\n```\n\n::: {.cell-output-display}\n![](machinelearning_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nGet the model that the tuning process has determined is the best using\nselect_best() and finalize_workflow().\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_cv %>%\n  show_best(metric = \"rmse\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 8\n  cost_complexity tree_depth .metric .estimator  mean     n std_err .config     \n            <dbl>      <int> <chr>   <chr>      <dbl> <int>   <dbl> <chr>       \n1    0.0000000001          1 rmse    standard    1.19    25  0.0181 Preprocesso…\n2    0.0000000178          1 rmse    standard    1.19    25  0.0181 Preprocesso…\n3    0.00000316            1 rmse    standard    1.19    25  0.0181 Preprocesso…\n4    0.000562              1 rmse    standard    1.19    25  0.0181 Preprocesso…\n5    0.0000000001          4 rmse    standard    1.20    25  0.0182 Preprocesso…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_best = tree_cv %>%\n  select_best(metric = \"rmse\")\ntree_best\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  cost_complexity tree_depth .config              \n            <dbl>      <int> <chr>                \n1    0.0000000001          1 Preprocessor1_Model01\n```\n:::\n:::\n\n\nFinalize workflow with the fit() function\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_f_workflow = tree_workflow %>%\n  finalize_workflow(tree_best)\n\ntree_f_fit = tree_f_workflow %>% fit(data=data_train)\ntree_f_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: decision_tree()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n1 Recipe Step\n\n• step_dummy()\n\n── Model ───────────────────────────────────────────────────────────────────────\nn= 508 \n\nnode), split, n, deviance, yval\n      * denotes terminal node\n\n1) root 508 742.9363 98.93642  \n  2) Sneeze_Yes>=0.5 280 259.6477 98.69107 *\n  3) Sneeze_Yes< 0.5 228 445.7356 99.23772 *\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#plot tree\nrpart.plot(extract_fit_parsnip(tree_f_fit)$fit)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Cannot retrieve the data used to build the model (model.frame: object '..y' not found).\nTo silence this warning:\n    Call rpart.plot with roundint=FALSE,\n    or rebuild the rpart model with model=TRUE.\n```\n:::\n\n::: {.cell-output-display}\n![](machinelearning_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n#### evaluate the final fit\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#predicted and residuals\ntree_residuals = tree_f_fit %>%\n  augment(data_train) %>% #use augment() to make predictions from train data\n  select(c(.pred, BodyTemp)) %>%\n  mutate(.resid = BodyTemp - .pred) #calculate residuals and make new row.\n\ntree_residuals\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 508 × 3\n   .pred BodyTemp .resid\n   <dbl>    <dbl>  <dbl>\n 1  99.2     97.8 -1.44 \n 2  99.2     98.1 -1.14 \n 3  98.7     98.1 -0.591\n 4  98.7     98.2 -0.491\n 5  98.7     97.8 -0.891\n 6  98.7     98.2 -0.491\n 7  98.7     98.1 -0.591\n 8  99.2     98   -1.24 \n 9  99.2     97.7 -1.54 \n10  99.2     98.2 -1.04 \n# … with 498 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot predicted values vs actual values\nplot_tree_predicted = tree_residuals %>%\n  ggplot(aes(x = BodyTemp, y = .pred)) + \n  geom_point() + \n  labs(title = \"Predicted outcomes vs Actual Outcomes\", \n       x = \"Body Temp Actual\", \n       y = \"Body Temp Prediction\")\nplot_tree_predicted\n```\n\n::: {.cell-output-display}\n![](machinelearning_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot predicted values vs residuals\nplot_tree_residual = ggplot(tree_residuals, \n                              aes(y = .resid, \n                              x = .pred)) + \n  geom_point() + \n  labs(title = \"Prediction Outcomes vs Residuals: Decision Tree\", \n       x = \"Body Temp Prediction\", \n       y = \"Residuals\")\nplot(plot_tree_residual) \n```\n\n::: {.cell-output-display}\n![](machinelearning_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n### performance \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_cv %>%\n  show_best(metric = \"rmse\", n=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 8\n  cost_complexity tree_depth .metric .estimator  mean     n std_err .config     \n            <dbl>      <int> <chr>   <chr>      <dbl> <int>   <dbl> <chr>       \n1    0.0000000001          1 rmse    standard    1.19    25  0.0181 Preprocesso…\n```\n:::\n:::\n\nRMSE for the best fit tree model = 1.18\n\n\n## LASSO\n\n### Model specification\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#mixture = 1 -> glmnet will remove irrelevant predictors\nlasso_mod = linear_reg(penalty = tune(), mixture = 1) %>% \n  set_engine(\"glmnet\")\n```\n:::\n\n\n### Workflow definition\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_workflow = workflow() %>%\n  add_model(lasso_mod) %>%\n  add_recipe(data_recipe)\n```\n:::\n\n\n### tuning grid specification\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_grid = tibble(penalty = 10^seq(-4, -1, length.out = 30))\nlasso_grid %>% top_n(-6)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSelecting by penalty\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 1\n   penalty\n     <dbl>\n1 0.0001  \n2 0.000127\n3 0.000161\n4 0.000204\n5 0.000259\n6 0.000329\n```\n:::\n\n```{.r .cell-code}\nlasso_grid %>% top_n(6)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSelecting by penalty\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 1\n  penalty\n    <dbl>\n1  0.0304\n2  0.0386\n3  0.0489\n4  0.0621\n5  0.0788\n6  0.1   \n```\n:::\n:::\n\n\n### tuning using cross validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_cv = lasso_workflow %>%\n  tune_grid(resamples = fold_train,\n            grid = lasso_grid,\n            control = control_grid(verbose = FALSE, save_pred = TRUE),\n            metrics = metric_set(rmse))\n\nlasso_cv%>% collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30 × 7\n    penalty .metric .estimator  mean     n std_err .config              \n      <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                \n 1 0.0001   rmse    standard    1.18    25  0.0167 Preprocessor1_Model01\n 2 0.000127 rmse    standard    1.18    25  0.0167 Preprocessor1_Model02\n 3 0.000161 rmse    standard    1.18    25  0.0167 Preprocessor1_Model03\n 4 0.000204 rmse    standard    1.18    25  0.0167 Preprocessor1_Model04\n 5 0.000259 rmse    standard    1.18    25  0.0167 Preprocessor1_Model05\n 6 0.000329 rmse    standard    1.18    25  0.0167 Preprocessor1_Model06\n 7 0.000418 rmse    standard    1.18    25  0.0167 Preprocessor1_Model07\n 8 0.000530 rmse    standard    1.18    25  0.0167 Preprocessor1_Model08\n 9 0.000672 rmse    standard    1.18    25  0.0167 Preprocessor1_Model09\n10 0.000853 rmse    standard    1.18    25  0.0167 Preprocessor1_Model10\n# … with 20 more rows\n```\n:::\n:::\n\n\n### Model Evaluation\n\nLook at diagnostics using autoplot().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_cv %>% autoplot()\n```\n\n::: {.cell-output-display}\n![](machinelearning_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nGet the model that the tuning process has determined is the best using\nselect_best() and finalize_workflow().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_cv %>%\n  show_best(metric = \"rmse\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 7\n  penalty .metric .estimator  mean     n std_err .config              \n    <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                \n1  0.0621 rmse    standard    1.15    25  0.0169 Preprocessor1_Model28\n2  0.0489 rmse    standard    1.15    25  0.0169 Preprocessor1_Model27\n3  0.0386 rmse    standard    1.15    25  0.0169 Preprocessor1_Model26\n4  0.0788 rmse    standard    1.16    25  0.0171 Preprocessor1_Model29\n5  0.0304 rmse    standard    1.16    25  0.0169 Preprocessor1_Model25\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_best = lasso_cv %>%\n  select_best(metric = \"rmse\")\nlasso_best\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  penalty .config              \n    <dbl> <chr>                \n1  0.0621 Preprocessor1_Model28\n```\n:::\n:::\n\n\nFinalize workflow with the fit() function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_f_workflow = lasso_workflow %>%\n  finalize_workflow(lasso_best)\n\nlasso_f_fit = lasso_f_workflow %>% fit(data=data_train)\nlasso_f_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n1 Recipe Step\n\n• step_dummy()\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:  glmnet::glmnet(x = maybe_matrix(x), y = y, family = \"gaussian\",      alpha = ~1) \n\n   Df  %Dev   Lambda\n1   0  0.00 0.271900\n2   2  1.24 0.247700\n3   2  2.67 0.225700\n4   2  3.86 0.205700\n5   2  4.85 0.187400\n6   2  5.67 0.170800\n7   2  6.35 0.155600\n8   2  6.91 0.141800\n9   5  7.57 0.129200\n10  5  8.27 0.117700\n11  8  9.06 0.107200\n12  8  9.81 0.097710\n13  9 10.44 0.089030\n14  9 11.09 0.081120\n15  9 11.63 0.073920\n16 10 12.12 0.067350\n17 10 12.56 0.061370\n18 12 13.00 0.055910\n19 14 13.45 0.050950\n20 16 13.85 0.046420\n21 19 14.24 0.042300\n22 19 14.59 0.038540\n23 19 14.87 0.035120\n24 22 15.17 0.032000\n25 22 15.44 0.029150\n26 22 15.67 0.026560\n27 22 15.85 0.024200\n28 23 16.01 0.022050\n29 24 16.15 0.020090\n30 25 16.28 0.018310\n31 25 16.39 0.016680\n32 25 16.49 0.015200\n33 25 16.56 0.013850\n34 26 16.63 0.012620\n35 27 16.69 0.011500\n36 27 16.73 0.010480\n37 27 16.77 0.009547\n38 27 16.81 0.008698\n39 28 16.84 0.007926\n40 29 16.86 0.007222\n41 29 16.88 0.006580\n42 29 16.90 0.005995\n43 29 16.91 0.005463\n44 29 16.92 0.004978\n45 30 16.93 0.004535\n46 30 16.94 0.004132\n\n...\nand 22 more lines.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#plot for how the number of predictors included in the LASSO model changes with the tuning parameter\nx = lasso_f_fit$fit$fit$fit\nplot(x, \"lambda\")\n```\n\n::: {.cell-output-display}\n![](machinelearning_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n#### evaluate the final fit (repeat)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_residual = lasso_f_fit %>%\n  augment(data_train) %>% \n  select(c(.pred, BodyTemp)) %>%\n  mutate(resid = BodyTemp - .pred) \nlasso_residual\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 508 × 3\n   .pred BodyTemp  resid\n   <dbl>    <dbl>  <dbl>\n 1  98.8     97.8 -0.950\n 2  98.8     98.1 -0.719\n 3  98.5     98.1 -0.360\n 4  98.8     98.2 -0.606\n 5  98.7     97.8 -0.907\n 6  98.7     98.2 -0.523\n 7  98.4     98.1 -0.257\n 8  99.3     98   -1.26 \n 9  98.9     97.7 -1.24 \n10  99.0     98.2 -0.769\n# … with 498 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot predicted values vs actual values\nplot_lasso_predicted = lasso_residual %>%\n  ggplot(aes(x = BodyTemp, y = .pred)) + \n  geom_point() + \n  labs(title = \"Predicted Outcomes vs Actual Outcomes\", \n       x = \"Body Temp Actual\", \n       y = \"Body Temp Prediction\")\nplot_lasso_predicted\n```\n\n::: {.cell-output-display}\n![](machinelearning_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot predicted values vs residuals\nplot_lasso_residual = lasso_residual %>% \n  ggplot(aes(x = resid, y = .pred)) + \n  geom_point() +\n  labs(title = \"Predictions vs Residual\", \n       x = \"Residuals\", \n       y = \"Body Temp Prediction\")\nplot_lasso_residual\n```\n\n::: {.cell-output-display}\n![](machinelearning_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n### performance \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_cv %>%\n  show_best(metric = \"rmse\", n=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 7\n  penalty .metric .estimator  mean     n std_err .config              \n    <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                \n1  0.0621 rmse    standard    1.15    25  0.0169 Preprocessor1_Model28\n```\n:::\n:::\n\nRMSE for the best fit LASSO model is 1.18\n\n## Random Forest\n\n### Model specification\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncores = parallel::detectCores()\ncores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\nrandomfor_model <-\n  rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%\n  set_engine(\"ranger\", num.threads = cores) %>%\n  set_mode(\"regression\")\n```\n:::\n\n\n### Workflow definition\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandomfor_workflow <-\n  workflow() %>%\n  add_model(randomfor_model) %>%\n  add_recipe(data_recipe)\n```\n:::\n\n\n### tuning grid specification\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandomfor_model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom Forest Model Specification (regression)\n\nMain Arguments:\n  mtry = tune()\n  trees = 1000\n  min_n = tune()\n\nEngine-Specific Arguments:\n  num.threads = cores\n\nComputational engine: ranger \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_parameter_set_dials(randomfor_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCollection of 2 parameters for tuning\n\n identifier  type    object\n       mtry  mtry nparam[?]\n      min_n min_n nparam[+]\n\nModel parameters needing finalization:\n   # Randomly Selected Predictors ('mtry')\n\nSee `?dials::finalize` or `?dials::update.parameters` for more information.\n```\n:::\n:::\n\n\n### tuning using cross validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandomfor_cv = randomfor_workflow %>%\n  tune_grid(resamples = fold_train,\n            grid = 25,\n            control = control_grid(save_pred = TRUE),\n            metrics = metric_set(rmse))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ni Creating pre-processing data to finalize unknown parameter: mtry\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandomfor_cv %>% \n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 25 × 8\n    mtry min_n .metric .estimator  mean     n std_err .config              \n   <int> <int> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                \n 1    13    13 rmse    standard    1.19    25  0.0166 Preprocessor1_Model01\n 2     5    36 rmse    standard    1.17    25  0.0165 Preprocessor1_Model02\n 3    16    28 rmse    standard    1.18    25  0.0166 Preprocessor1_Model03\n 4    30    40 rmse    standard    1.18    25  0.0168 Preprocessor1_Model04\n 5    11    30 rmse    standard    1.17    25  0.0164 Preprocessor1_Model05\n 6     7    26 rmse    standard    1.17    25  0.0166 Preprocessor1_Model06\n 7    22    26 rmse    standard    1.19    25  0.0165 Preprocessor1_Model07\n 8    10    11 rmse    standard    1.19    25  0.0166 Preprocessor1_Model08\n 9     7     2 rmse    standard    1.20    25  0.0161 Preprocessor1_Model09\n10     9     6 rmse    standard    1.19    25  0.0159 Preprocessor1_Model10\n# … with 15 more rows\n```\n:::\n:::\n\n\n### Model Evaluation\n\nLook at diagnostics using autoplot().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(randomfor_cv)\n```\n\n::: {.cell-output-display}\n![](machinelearning_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\nGet the model that the tuning process has determined is the best using\nselect_best() and finalize_workflow().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandomfor_cv %>%\n  show_best(metric = \"rmse\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 8\n   mtry min_n .metric .estimator  mean     n std_err .config              \n  <int> <int> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                \n1     6    33 rmse    standard    1.17    25  0.0166 Preprocessor1_Model23\n2     5    36 rmse    standard    1.17    25  0.0165 Preprocessor1_Model02\n3     7    26 rmse    standard    1.17    25  0.0166 Preprocessor1_Model06\n4     2    12 rmse    standard    1.17    25  0.0167 Preprocessor1_Model25\n5     2     4 rmse    standard    1.17    25  0.0166 Preprocessor1_Model19\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandomfor_best = randomfor_cv %>%\n  select_best(metric = \"rmse\")\nrandomfor_best\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n   mtry min_n .config              \n  <int> <int> <chr>                \n1     6    33 Preprocessor1_Model23\n```\n:::\n:::\n\n\nfinalize workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandomfor_f_workflow = randomfor_workflow %>%\n  finalize_workflow(randomfor_best)\n\nrandomfor_f_fit = randomfor_f_workflow %>% fit(data=data_train)\nrandomfor_f_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: rand_forest()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n1 Recipe Step\n\n• step_dummy()\n\n── Model ───────────────────────────────────────────────────────────────────────\nRanger result\n\nCall:\n ranger::ranger(x = maybe_data_frame(x), y = y, mtry = min_cols(~6L,      x), num.trees = ~1000, min.node.size = min_rows(~33L, x),      num.threads = ~cores, verbose = FALSE, seed = sample.int(10^5,          1)) \n\nType:                             Regression \nNumber of trees:                  1000 \nSample size:                      508 \nNumber of independent variables:  31 \nMtry:                             6 \nTarget node size:                 33 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       1.373913 \nR squared (OOB):                  0.06240402 \n```\n:::\n:::\n\n#### evaluate the final fit (repeat)\n\n::: {.cell}\n\n```{.r .cell-code}\n# get predicted and residual values in one dataset \nrandomfor_residual = randomfor_f_fit %>%\n  augment(data_train) %>% \n  select(c(.pred, BodyTemp)) %>%\n  mutate(resid = BodyTemp - .pred) \nrandomfor_residual\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 508 × 3\n   .pred BodyTemp  resid\n   <dbl>    <dbl>  <dbl>\n 1  98.7     97.8 -0.901\n 2  98.5     98.1 -0.448\n 3  98.7     98.1 -0.554\n 4  98.7     98.2 -0.523\n 5  98.8     97.8 -0.990\n 6  98.5     98.2 -0.306\n 7  98.3     98.1 -0.206\n 8  99.1     98   -1.12 \n 9  98.8     97.7 -1.09 \n10  98.9     98.2 -0.667\n# … with 498 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot actual values vs predicted values\nplot_randomfor_predicted = randomfor_residual %>%\n  ggplot(aes(x = BodyTemp, y = .pred)) + \n  geom_point() + \n  labs(title = \"Predictions vs Actual\", \n       x = \"Body Temp Actual\", \n       y = \"Body Temp Prediction\")\nplot_randomfor_predicted\n```\n\n::: {.cell-output-display}\n![](machinelearning_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot predicted values vs residuals\nplot_randomfor_residual = randomfor_residual %>% \n  ggplot(aes(x = resid, y = .pred)) + \n  geom_point() +\n  labs(title = \"Predictions vs Residual\", \n       x = \"Residual\", \n       y = \"Body Temp Prediction\")\nplot_randomfor_residual\n```\n\n::: {.cell-output-display}\n![](machinelearning_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n### performance \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandomfor_cv %>%\n  show_best(metric = \"rmse\", n=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 8\n   mtry min_n .metric .estimator  mean     n std_err .config              \n  <int> <int> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                \n1     6    33 rmse    standard    1.17    25  0.0166 Preprocessor1_Model23\n```\n:::\n:::\n\nRandom forest RMSE for the best fit is 1.18\n\n# Final Evaluation\nWhen rounding to 2 sig figures, the RMSE is the same for all 3 models. All models had similar performance. When using the plots for visual analysis of the performance, you can see there is more of a visual relationship using LASSO and Random Forest but not the tree model. I selected the Lasso model because when accounting for more significant figures, it is lower.\n\n::: {.cell}\n\n```{.r .cell-code}\n#fit the test data once \nlasso_lastfit = lasso_f_workflow %>%\n  last_fit(data_split)\n\nlasso_lastfit %>% collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard      1.15   Preprocessor1_Model1\n2 rsq     standard      0.0291 Preprocessor1_Model1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#compare with the null\n\nnullf_test %>% collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  .metric .estimator   mean     n std_err .config             \n  <chr>   <chr>       <dbl> <int>   <dbl> <chr>               \n1 rmse    standard     1.16    25  0.0285 Preprocessor1_Model1\n2 rsq     standard   NaN        0 NA      Preprocessor1_Model1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#lasso_last_residual = lasso_lastfit %>%\n#  augment(data_test) %>% \n#  select(c(.pred, BodyTemp)) %>%\n#  mutate(resid = BodyTemp - .pred) \n#lasso_last_residual\n```\n:::\n\n\n\n# Conclusion\n\nThe Data above show that the model with all the possible predictors is\nthe best model to fit the data as it minimizes the Root Mean Squared\nErrors (RMSE) of the data.\n",
    "supporting": [
      "machinelearning_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}